[
    {
        "id": "d0c14ce233640803",
        "type": "tab",
        "label": "NodeRedHomeSecurity",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "17cbbe15d2f97463",
        "type": "serial in",
        "z": "d0c14ce233640803",
        "name": "Aduino",
        "serial": "bdc80b5c8b8077d2",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "e61c742a93403cc4",
                "34f24e4248f3059b",
                "48f1e16027dbf3f5",
                "e56f25aae598f3d7",
                "de8e3d73f8438ba8",
                "f5b0c81889a8a2ab",
                "e5b35358db0b67d4"
            ]
        ]
    },
    {
        "id": "a3c5ec6b449f6138",
        "type": "function",
        "z": "d0c14ce233640803",
        "name": "Servo",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 700,
        "wires": [
            [
                "ef7171ce22b6b91c",
                "0bcf750b8198e61b",
                "8f7fbd0a7ea76577"
            ]
        ]
    },
    {
        "id": "e61c742a93403cc4",
        "type": "function",
        "z": "d0c14ce233640803",
        "name": "Smoke",
        "func": "var payload = msg.payload;\n\n// ตรวจสอบว่ามีค่าและเป็น string ก่อนที่จะทำงานต่อ\nif (typeof payload === 'string' && payload.includes('=')) {\n    var value = parseInt(payload.split('=')[1].trim());\n    msg.payload = value;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "99cb03b81606a1ac"
            ]
        ]
    },
    {
        "id": "ef7171ce22b6b91c",
        "type": "ui_switch",
        "z": "d0c14ce233640803",
        "name": "",
        "label": "Door",
        "tooltip": "",
        "group": "4ddf65445511dec4",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "OPEN_DOOR",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "CLOSE_DOOR",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 330,
        "y": 640,
        "wires": [
            [
                "5f0ee596ee83fe68",
                "5954c6d171ba7301"
            ]
        ]
    },
    {
        "id": "0bcf750b8198e61b",
        "type": "ui_switch",
        "z": "d0c14ce233640803",
        "name": "",
        "label": "Window Left",
        "tooltip": "",
        "group": "4ddf65445511dec4",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "OPEN_LEFT_WINDOW",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "CLOSE_LEFT_WINDOW",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 700,
        "wires": [
            [
                "5f0ee596ee83fe68",
                "5954c6d171ba7301"
            ]
        ]
    },
    {
        "id": "8f7fbd0a7ea76577",
        "type": "ui_switch",
        "z": "d0c14ce233640803",
        "name": "",
        "label": "Window Right",
        "tooltip": "",
        "group": "4ddf65445511dec4",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "OPEN_RIGHT_WINDOW",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "CLOSE_RIGHT_WINDOW",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 760,
        "wires": [
            [
                "5f0ee596ee83fe68",
                "5954c6d171ba7301"
            ]
        ]
    },
    {
        "id": "5f0ee596ee83fe68",
        "type": "serial out",
        "z": "d0c14ce233640803",
        "name": "Arduino",
        "serial": "bdc80b5c8b8077d2",
        "x": 640,
        "y": 700,
        "wires": []
    },
    {
        "id": "34f24e4248f3059b",
        "type": "function",
        "z": "d0c14ce233640803",
        "name": "Alert",
        "func": "// ตรวจสอบว่า msg.payload ไม่เป็น undefined และเป็น string\nif (msg.payload && typeof msg.payload === 'string') {\n    // ลบ whitespace และ newline characters ออก\n    msg.payload = msg.payload.trim();\n\n    // ตรวจสอบข้อความที่มาจาก Serial\n    if (msg.payload === \"Alert\") {\n        msg.payload = {\n            text: \"WARNING\",\n            color: \"red\" // สีพื้นหลังเป็นสีแดงเมื่อมีข้อความ Alert\n        };\n    } else {\n        // ถ้าไม่ใช่ข้อความ Alert ให้แสดงสถานะปกติ\n        msg.payload = {\n            text: \"Normal\",\n            color: \"green\" // สีพื้นหลังเป็นสีเขียวเมื่อข้อความไม่ใช่ Alert\n        };\n    }\n    return msg;\n} else {\n    // กรณีที่ msg.payload เป็น undefined หรือไม่ใช่ string\n    node.warn(\"Invalid msg.payload: \" + msg.payload);\n    return null; // ไม่ทำอะไรถ้า msg.payload ไม่ถูกต้อง\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 320,
        "wires": [
            [
                "3a0f369fa920e9fc"
            ]
        ]
    },
    {
        "id": "5954c6d171ba7301",
        "type": "debug",
        "z": "d0c14ce233640803",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 580,
        "wires": []
    },
    {
        "id": "99cb03b81606a1ac",
        "type": "ui_gauge",
        "z": "d0c14ce233640803",
        "name": "",
        "group": "70728b9b9c246491",
        "order": 0,
        "width": "4",
        "height": "3",
        "gtype": "gage",
        "title": "",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 550,
        "y": 160,
        "wires": []
    },
    {
        "id": "f2216bbf01b40645",
        "type": "ui_template",
        "z": "d0c14ce233640803",
        "group": "fdd43888bc42bf88",
        "name": "Fire alarm",
        "order": 0,
        "width": "4",
        "height": "3",
        "format": "<div\n    style=\"width: 100px; height: 100px; border-radius: 50%; background-color: {{msg.payload.color}}; display: flex; justify-content: center; align-items: center; font-size: 20px; color: white;\">\n    {{msg.payload.text}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 560,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "3a0f369fa920e9fc",
        "type": "ui_template",
        "z": "d0c14ce233640803",
        "group": "2bd53383a7e1c42d",
        "name": "Alert",
        "order": 0,
        "width": "4",
        "height": "3",
        "format": "<div\n    style=\"width: 100px; height: 100px; border-radius: 50%; background-color: {{msg.payload.color}}; display: flex; justify-content: center; align-items: center; font-size: 20px; color: white;\">\n    {{msg.payload.text}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 550,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "6c3be6250ddbb57e",
        "type": "debug",
        "z": "d0c14ce233640803",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 360,
        "wires": []
    },
    {
        "id": "aa9fd024e6e7c60b",
        "type": "ui_button",
        "z": "d0c14ce233640803",
        "name": "",
        "group": "92ed4f96d8b9bf6a",
        "order": 0,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Take a picture",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "TAKE_A_PICTURE",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 600,
        "y": 520,
        "wires": [
            [
                "6c3be6250ddbb57e",
                "084b9ea05627ef55"
            ]
        ]
    },
    {
        "id": "e56f25aae598f3d7",
        "type": "function",
        "z": "d0c14ce233640803",
        "name": "Notification Fire Alarm",
        "func": "// ใช้ context เพื่อเก็บค่าควันล่าสุดและเวลาส่งการแจ้งเตือนล่าสุด\nlet lastSmokeValue = context.get('lastSmokeValue') || 0;\nlet lastAlertTime = context.get('lastSmokeAlertTime') || 0;\nlet now = Date.now(); // ใช้ Date.now() เพื่อดึงเวลาปัจจุบันในรูปแบบ milliseconds\n\n// กำหนดระยะเวลา debounce (เช่น 5000 ms หรือ 5 วินาที)\nlet debounceTime = 5000;\n\nlet smokeData = msg.payload.match(/\\d+/); // ดึงเฉพาะตัวเลขจาก string เช่น \"Smoke = 166\"\nif (smokeData) {\n    let smokeValue = parseInt(smokeData[0]); // แปลงเป็นตัวเลข\n\n    // ตรวจสอบว่าค่าควันมีการเปลี่ยนแปลงหรือไม่\n    if (smokeValue !== lastSmokeValue) {\n        if (smokeValue > 300 && (now - lastAlertTime > debounceTime)) {\n            msg.payload = \"FIRE_ALARM\"; // ส่งคำสั่ง \"FIRE_ALARM\" ไปยัง ESP32-CAM\n\n            // อัปเดตเวลาการแจ้งเตือนล่าสุด\n            context.set('lastSmokeAlertTime', now);\n        } else {\n            return null; // ถ้าเงื่อนไขไม่ตรง ให้หยุดการส่งออก\n        }\n\n        // อัปเดตค่าควันล่าสุด\n        context.set('lastSmokeValue', smokeValue);\n\n        return msg;\n    }\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 480,
        "wires": [
            [
                "6c3be6250ddbb57e",
                "084b9ea05627ef55"
            ]
        ]
    },
    {
        "id": "48f1e16027dbf3f5",
        "type": "function",
        "z": "d0c14ce233640803",
        "name": "Notification Theft Alert",
        "func": "// ตรวจสอบว่า msg.payload ไม่เป็น undefined และเป็น string\nif (msg.payload && typeof msg.payload === 'string') {\n    // ลบ whitespace และ newline characters ออก\n    msg.payload = msg.payload.trim();\n\n    // ดึงเวลาการแจ้งเตือนล่าสุดจาก context, ถ้าไม่มีให้ตั้งเป็น 0\n    var lastAlertTime = context.get('lastAlertTime') || 0;\n    var now = Date.now(); // ใช้ Date.now() เพื่อดึงเวลาปัจจุบันในรูปแบบ milliseconds\n\n    // กำหนดระยะเวลา debounce (เช่น 5000 ms หรือ 5 วินาที)\n    var debounceTime = 5000;\n\n    // ตรวจสอบว่าข้อความเป็น \"Alert\" และไม่ส่งซ้ำภายในช่วงเวลาที่กำหนด\n    if (msg.payload === \"Alert\" && (now - lastAlertTime > debounceTime)) {\n        // ส่ง THEFT_ALERT ไปยัง ESP32-CAM ผ่าน Serial\n        msg.payload = \"THEFT_ALERT\";\n\n        // อัปเดตเวลาการแจ้งเตือนล่าสุดใน context\n        context.set('lastAlertTime', now);\n\n        // ส่งข้อมูลไปยัง output ของ Node-RED\n        return msg;\n    } else {\n        // ถ้าไม่ตรงเงื่อนไข ให้หยุดการส่งออก\n        return null;\n    }\n} else {\n    // ถ้า msg.payload ไม่ใช่ string หรือเป็น undefined ให้หยุดการทำงาน\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 400,
        "wires": [
            [
                "6c3be6250ddbb57e",
                "084b9ea05627ef55"
            ]
        ]
    },
    {
        "id": "72415bce66a94ab8",
        "type": "debug",
        "z": "d0c14ce233640803",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 100,
        "wires": []
    },
    {
        "id": "de8e3d73f8438ba8",
        "type": "function",
        "z": "d0c14ce233640803",
        "name": "Fire alarm",
        "func": "let smokeData = msg.payload.match(/\\d+/); // ดึงเฉพาะตัวเลขจาก string เช่น \"Smoke = 166\"\nif (smokeData) {\n    let smokeValue = parseInt(smokeData[0]); // แปลงเป็นตัวเลข\n    if (smokeValue > 300) {\n        msg.payload = {\n            text: \"FIRE\",\n            color: \"red\" // สีพื้นหลังเป็นสีแดงเมื่อค่ามากกว่า 300\n        };\n    } else {\n        msg.payload = {\n            text: \"Normal\",\n            color: \"green\" // สีพื้นหลังเป็นสีเขียวเมื่อค่าไม่เกิน 300\n        };\n    }\n    return msg;\n} else {\n    return null; // ถ้าไม่เจอค่าตัวเลขก็จะไม่ส่งข้อมูล\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "f2216bbf01b40645"
            ]
        ]
    },
    {
        "id": "f5b0c81889a8a2ab",
        "type": "function",
        "z": "d0c14ce233640803",
        "name": "OPEN_DOOR",
        "func": "let lastSmokeValue = context.get('lastSmokeValue') || 0; // รับค่า smoke ก่อนหน้า หรือใช้ค่า 0 ถ้ายังไม่มีค่า\nlet alarmTimeout = context.get('alarmTimeout'); // ดึงตัวนับเวลาเก่าถ้ามี\nlet smokeData = msg.payload.match(/\\d+/); // ดึงเฉพาะตัวเลขจาก string เช่น \"Smoke = 166\"\n\nif (smokeData) {\n    let smokeValue = parseInt(smokeData[0]); // แปลงเป็นตัวเลข\n\n    if (smokeValue !== lastSmokeValue) { // เช็คว่าค่า smoke มีการเปลี่ยนแปลงหรือไม่\n        if (smokeValue > 300) {\n            if (alarmTimeout) {\n                clearTimeout(alarmTimeout);\n            }\n\n            msg.payload = \"OPEN_DOOR\";\n            node.send(msg); // ส่ง \"OPEN_DOOR\" ออกไป\n\n            // สร้างตัวนับเวลาใหม่สำหรับ 5 วินาที\n            alarmTimeout = setTimeout(function () {\n                msg.payload = \"CLOSE_DOOR\";\n                node.send(msg); // ส่ง \"CLOSE_DOOR\" เมื่อครบ 5 วินาที\n            }, 5000); // รอ 5 วินาที\n\n            context.set('alarmTimeout', alarmTimeout);\n        } else {\n            return null; // ถ้าค่า smoke น้อยกว่า 300 ไม่ทำอะไร\n        }\n        \n        context.set('lastSmokeValue', smokeValue);\n\n        return null; // ส่งแค่ \"FIRE_ALARM\" และ \"OPEN_DOOR\" ในครั้งแรก\n    }\n}\nreturn null; // ถ้าไม่มีการเปลี่ยนแปลงค่า smoke, ไม่ส่งข้อความออก\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 560,
        "wires": [
            [
                "5f0ee596ee83fe68"
            ]
        ]
    },
    {
        "id": "084b9ea05627ef55",
        "type": "mqtt out",
        "z": "d0c14ce233640803",
        "name": "",
        "topic": "esp32cam/mqtt",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "eae59356b923ec75",
        "x": 840,
        "y": 440,
        "wires": []
    },
    {
        "id": "e5b35358db0b67d4",
        "type": "mqtt out",
        "z": "d0c14ce233640803",
        "name": "",
        "topic": "smoke/mqtt/thingspeak",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "641fefcc3c926dc2",
        "x": 390,
        "y": 40,
        "wires": []
    },
    {
        "id": "f53ed3fbdf806a91",
        "type": "ui_spacer",
        "z": "d0c14ce233640803",
        "name": "spacer",
        "group": "70728b9b9c246491",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "1a7f9a77e642bbbf",
        "type": "ui_spacer",
        "z": "d0c14ce233640803",
        "name": "spacer",
        "group": "2bd53383a7e1c42d",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "455cbf6b5fda58f5",
        "type": "ui_spacer",
        "z": "d0c14ce233640803",
        "name": "spacer",
        "group": "2bd53383a7e1c42d",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "643ae777799f9411",
        "type": "ui_spacer",
        "z": "d0c14ce233640803",
        "name": "spacer",
        "group": "fdd43888bc42bf88",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "a8beeea495bf14c0",
        "type": "ui_spacer",
        "z": "d0c14ce233640803",
        "name": "spacer",
        "group": "fdd43888bc42bf88",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "bdc80b5c8b8077d2",
        "type": "serial-port",
        "name": "COM23",
        "serialport": "COM23",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "4ddf65445511dec4",
        "type": "ui_group",
        "name": "Servo",
        "tab": "5d037b457313cd57",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "70728b9b9c246491",
        "type": "ui_group",
        "name": "Smoke",
        "tab": "5d037b457313cd57",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fdd43888bc42bf88",
        "type": "ui_group",
        "name": "Fire alarm",
        "tab": "5d037b457313cd57",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2bd53383a7e1c42d",
        "type": "ui_group",
        "name": "Alert",
        "tab": "5d037b457313cd57",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "92ed4f96d8b9bf6a",
        "type": "ui_group",
        "name": "Camera",
        "tab": "5d037b457313cd57",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "eae59356b923ec75",
        "type": "mqtt-broker",
        "name": "ESP32CAM",
        "broker": "mqtt-dashboard.com",
        "port": "1883",
        "clientid": "clientId-C9njBLfa8f",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "641fefcc3c926dc2",
        "type": "mqtt-broker",
        "name": "ThingSpeak",
        "broker": "mqtt-dashboard.com",
        "port": "1883",
        "clientid": "clientId-eP1zkOlAa0",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5d037b457313cd57",
        "type": "ui_tab",
        "name": "Home Security",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false,
        "info": ".md-toolbar-tools {\r\n    background-color: #3f51b5; /* สีพื้นหลัง */\r\n    color: #ffffff; /* สีตัวอักษร */\r\n    padding: 10px; /* ระยะห่างภายใน */\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* เงา */\r\n    display: flex; /* ใช้ flexbox สำหรับจัดแนว */\r\n    align-items: center; /* จัดแนวแนวตั้งให้ตรงกลาง */\r\n}\r\n\r\n.md-toolbar-tools .tool-item {\r\n    margin-right: 15px; /* ระยะห่างระหว่างเครื่องมือ */\r\n    text-decoration: none; /* ลบเส้นใต้ */\r\n    font-weight: bold; /* ตัวหนา */\r\n    transition: color 0.3s; /* เอฟเฟคการเปลี่ยนสี */\r\n}\r\n\r\n.md-toolbar-tools .tool-item:hover {\r\n    color: #ffeb3b; /* เปลี่ยนสีเมื่อชี้เมาส์ */\r\n}\r\n\r\n.md-toolbar-tools .tool-icon {\r\n    margin-right: 5px; /* ระยะห่างระหว่างไอคอนและชื่อ */\r\n}\r\n"
    }
]